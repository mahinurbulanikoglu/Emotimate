package com.mahinurbulanikoglu.emotimate.ui.home

import android.graphics.Color
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.cardview.widget.CardView
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import com.mahinurbulanikoglu.emotimate.databinding.FragmentHomeBinding

class HomeFragment : Fragment() {

    private var _binding: FragmentHomeBinding? = null
    private val binding get() = _binding!!

    private var selectedMood: String? = null
    private lateinit var db: FirebaseFirestore

    private val motivationMap = mapOf(
        "M√ºkemmel" to listOf(
            "Sen bir yƒ±ldƒ±zsƒ±n, ƒ±≈üƒ±ƒüƒ±nƒ± yay! ‚ú®",
            "Bu enerjinle her ≈üeyin √ºstesinden gelirsin!",
            "Harika bir ruh halindesin, bunu kutla! üéâ",
            "Senin gibi birini g√∂rmek ilham verici!",
            "Bug√ºn her ≈üey m√ºmk√ºn g√∂r√ºn√ºyor üí´"
        ),
        "ƒ∞yi" to listOf(
            "Harika gidiyorsun! Bu enerjiyi koru üåü",
            "Bug√ºn√ºn g√ºc√ºn√º yarƒ±na ta≈üƒ±yabilirsin!",
            "Kendinle gurur duymalƒ±sƒ±n üëè",
            "Bu anƒ±n tadƒ±nƒ± √ßƒ±kar!",
            "Mutluluƒüunu ba≈ükalarƒ±na da yansƒ±t üíõ"
        ),
        "Ortalama" to listOf(
            "Her g√ºn aynƒ± olmayabilir ama sen hep ilerliyorsun.",
            "Kendine zaman tanƒ±, her ≈üey yoluna girecek.",
            "Nefes al, yeniden ba≈ülamak i√ßin harika bir an.",
            "Bu his ge√ßici, sen kalƒ±cƒ±sƒ±n.",
            "ƒ∞yile≈ümek de bir ba≈üarƒ±dƒ±r. ƒ∞lerlemen √∂nemli üíö"
        ),
        "N√∂tr" to listOf(
            "Kendini zorlamak zorunda deƒüilsin, bu da bir his.",
            "Bug√ºn biraz dinlenmek de iyidir üõå",
            "Duygular gelip ge√ßer, sen buradasƒ±n.",
            "Ruh halin ne olursa olsun, kƒ±ymetlisin.",
            "Her ≈üey net deƒüilse bile sen doƒüru yoldasƒ±n."
        ),
        "K√∂t√º" to listOf(
            "Zor zamanlar ge√ßer, sen g√º√ßl√º kalƒ±rsƒ±n üí™",
            "Yalnƒ±z deƒüilsin, bu hisler ge√ßecek.",
            "Bug√ºn aƒülamak bile cesarettir.",
            "Kendine nazik ol, bug√ºnl√ºk bu kadarƒ± yeter üåßÔ∏è",
            "Unutma, fƒ±rtƒ±nadan sonra g√ºne≈ü mutlaka doƒüar ‚òÄÔ∏è"
        )
    )

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val homeViewModel =
            ViewModelProvider(this).get(HomeViewModel::class.java)

        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        val root: View = binding.root

        db = FirebaseFirestore.getInstance()

        // Duygu kartlarƒ± tƒ±klama i≈ülemleri
        binding.cardPerfect.setOnClickListener { onMoodSelected("M√ºkemmel", binding.cardPerfect) }
        binding.cardGood.setOnClickListener { onMoodSelected("ƒ∞yi", binding.cardGood) }
        binding.cardAverage.setOnClickListener { onMoodSelected("Ortalama", binding.cardAverage) }
        binding.cardNeutral.setOnClickListener { onMoodSelected("N√∂tr", binding.cardNeutral) }
        binding.cardBad.setOnClickListener { onMoodSelected("K√∂t√º", binding.cardBad) }

        // Kaydet butonu tƒ±klama i≈ülemi
        binding.btnSave.setOnClickListener {
            selectedMood?.let { mood ->
                val comment = binding.editNote.text.toString()
                saveMoodToFirestore(mood, comment)
            }
        }


        return root
    }

    private fun onMoodSelected(mood: String, selectedCard: CardView) {
        resetCardColors()
        selectedCard.setCardBackgroundColor(Color.parseColor("#BBDEFB"))

        binding.editNote.visibility = View.VISIBLE
        binding.btnSave.visibility = View.VISIBLE
        binding.tvMotivation.visibility = View.VISIBLE

        selectedMood = mood

        // üü° Motivasyon yazƒ±sƒ± g√∂ster
        showMotivation(mood)
    }

    private fun showMotivation(mood: String) {
        val messages = motivationMap[mood]
        val randomMessage = messages?.random() ?: "Bug√ºn nasƒ±lsƒ±n?"
        binding.tvMotivation.text = randomMessage
    }



    private fun resetCardColors() {
        val defaultColor = Color.WHITE
        binding.cardPerfect.setCardBackgroundColor(defaultColor)
        binding.cardGood.setCardBackgroundColor(defaultColor)
        binding.cardAverage.setCardBackgroundColor(defaultColor)
        binding.cardNeutral.setCardBackgroundColor(defaultColor)
        binding.cardBad.setCardBackgroundColor(defaultColor)
    }

    private fun saveMoodToFirestore(mood: String, comment: String?) {
        val data = hashMapOf(
            "mood" to mood,
            "comment" to comment,
            "timestamp" to FieldValue.serverTimestamp()
        )

        db.collection("feelings")
            .add(data)
            .addOnSuccessListener {
                Toast.makeText(requireContext(), "Duygun kaydedildi üéâ", Toast.LENGTH_SHORT).show()
                resetUI()
            }
            .addOnFailureListener {
                Toast.makeText(requireContext(), "Kaydedilemedi ‚ùå", Toast.LENGTH_SHORT).show()
            }
    }

    private fun resetUI() {
        resetCardColors()
        binding.editNote.setText("")
        binding.editNote.visibility = View.GONE
        binding.btnSave.visibility = View.GONE
        selectedMood = null
    }


    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
